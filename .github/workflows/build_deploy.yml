name: Build and Deploy to GitHub Pages

on:
  # Runs on pushes to main and any branch starting with 'feature/' or 'develop'
  push:
    branches: 
      - main
      - develop
      - 'feature/**'
      - 'release/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  id-token: write
  contents: write
  packages: write
  pages: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "publish"
  cancel-in-progress: false


jobs:
  build:
    name: Build FHIR Implementation Guide
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version:' sushi-config.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: koppelmij-builder:latest

      - name: Build FHIR Package
        run: |
          # Run the build using the Docker container with full project mount
          docker run -v ${PWD}:/src koppelmij-builder:latest build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fhir-package
          path: |
            ./output/
            ./sushi-config.yaml
          retention-days: 7

  deploy-pages:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    permissions: write-all
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Create gh-pages branch if it doesn't exist
        if: failure()
        run: |
          mkdir -p gh-pages
          cd gh-pages
          git init
          git checkout -b gh-pages
          echo "# GitHub Pages" > README.md
          git add README.md
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "Initial gh-pages branch"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: fhir-package
          path: build-output

      - name: Prepare deployment directory
        run: |
          # Determine the deployment path based on branch name
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DEPLOY_PATH="."
          else
            # Clean branch name for use in path (replace / with -)
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            DEPLOY_PATH="branches/${BRANCH_NAME}"
          fi
          
          echo "DEPLOY_PATH=${DEPLOY_PATH}" >> $GITHUB_ENV
          
          # Prepare the directory structure
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # For main branch, deploy to root but preserve branches directory
            if [ -d "gh-pages/branches" ]; then
              cp -r gh-pages/branches branches-backup
            fi
            rm -rf gh-pages/*
            if [ -d "branches-backup" ]; then
              mv branches-backup gh-pages/branches
            fi
            cp -r build-output/output/* gh-pages/
          else
            # For other branches, deploy to branches/[branch-name]
            mkdir -p "gh-pages/${DEPLOY_PATH}"
            rm -rf "gh-pages/${DEPLOY_PATH}"/*
            cp -r build-output/output/* "gh-pages/${DEPLOY_PATH}/"
          fi

      - name: Create index page for branch deployments
        if: github.ref != 'refs/heads/main'
        run: |
          # Create or update branches index
          cat > gh-pages/branches/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Branch Deployments</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  ul { list-style-type: none; padding: 0; }
                  li { margin: 10px 0; }
                  a { color: #0066cc; text-decoration: none; padding: 10px; display: inline-block; }
                  a:hover { text-decoration: underline; }
                  .branch { background: #f5f5f5; border-left: 4px solid #0066cc; margin: 10px 0; padding: 10px; }
              </style>
          </head>
          <body>
              <h1>Branch Deployments</h1>
              <p><a href="/">‚Üê Back to main</a></p>
              <div id="branches"></div>
              <script>
                  // List directories dynamically
                  fetch('.')
                      .then(response => response.text())
                      .then(html => {
                          const parser = new DOMParser();
                          const doc = parser.parseFromString(html, 'text/html');
                          const links = Array.from(doc.querySelectorAll('a'))
                              .map(a => a.getAttribute('href'))
                              .filter(href => href && !href.startsWith('/') && !href.startsWith('..') && !href.includes('.'))
                              .filter(href => href !== 'index.html');
                          
                          const branchesDiv = document.getElementById('branches');
                          if (links.length > 0) {
                              const list = document.createElement('ul');
                              links.forEach(branch => {
                                  const li = document.createElement('li');
                                  li.className = 'branch';
                                  const cleanBranch = branch.replace(/\/$/, '');
                                  li.innerHTML = `<a href="${cleanBranch}/">${cleanBranch}</a>`;
                                  list.appendChild(li);
                              });
                              branchesDiv.appendChild(list);
                          } else {
                              branchesDiv.innerHTML = '<p>No branch deployments available.</p>';
                          }
                      })
                      .catch(() => {
                          document.getElementById('branches').innerHTML = '<p>Error loading branch list.</p>';
                      });
              </script>
          </body>
          </html>
          EOF

      - name: Deploy to GitHub Pages
        run: |
          cd gh-pages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add -A
          
          # Create commit message with branch info
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            COMMIT_MSG="Deploy main branch to GitHub Pages"
          else
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            COMMIT_MSG="Deploy branch ${BRANCH_NAME} to GitHub Pages"
          fi
          
          git commit -m "${COMMIT_MSG}" || echo "No changes to commit"
          git push -f origin gh-pages

      - name: Output deployment URL
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "## üöÄ Deployment successful!" >> $GITHUB_STEP_SUMMARY
            echo "Main branch deployed to: https://${OWNER}.github.io/${REPO_NAME}/" >> $GITHUB_STEP_SUMMARY
          else
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            echo "## üöÄ Deployment successful!" >> $GITHUB_STEP_SUMMARY
            echo "Branch '${BRANCH_NAME}' deployed to: https://${OWNER}.github.io/${REPO_NAME}/branches/${BRANCH_NAME}/" >> $GITHUB_STEP_SUMMARY
            echo "All branches: https://${OWNER}.github.io/${REPO_NAME}/branches/" >> $GITHUB_STEP_SUMMARY
          fi
